# !! THIS FILE IS AUTOMATICALLY GENERATED.
# DO NOT EDIT.
# SEE calculation-helpers/code-generation/generate*.py

from typing import List, Tuple
import numpy as np


def v(
    U: float,
    t: float,
    epsl: float,
    occ_l_up: int,
    occ_l_down: int,
    neighbors_eps_occupation_tuples: List[Tuple[float, int, int]],
) -> np.complex128:
    res: np.complex128 = np.complex128(0)
    for (
        epsm,
        occ_m_up,
        occ_m_down,
    ) in neighbors_eps_occupation_tuples:
        if occ_l_up:
            if occ_l_down:
                if occ_m_up:
                    if occ_m_down:
                        # Lc:True, Mc:True, Ld:True, Md:True
                        res += 0
                    else:
                        # Lc:True, Mc:True, Ld:True, Md:False
                        res += 0 + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                else:
                    if occ_m_down:
                        # Lc:True, Mc:False, Ld:True, Md:True
                        res += 0 + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                    else:
                        # Lc:True, Mc:False, Ld:True, Md:False
                        res += 0 + 2 * (
                            np.expm1(1j * (epsl - epsm + U) * t) / (epsl - epsm + U)
                        )
            else:
                if occ_m_up:
                    if occ_m_down:
                        # Lc:True, Mc:True, Ld:False, Md:True
                        res += 0
                    else:
                        # Lc:True, Mc:True, Ld:False, Md:False
                        res += 0
                else:
                    if occ_m_down:
                        # Lc:True, Mc:False, Ld:False, Md:True
                        res += 0 + (
                            np.expm1(1j * (epsl - epsm - U) * t) / (epsl - epsm - U)
                        )
                    else:
                        # Lc:True, Mc:False, Ld:False, Md:False
                        res += 0 + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
        else:
            if occ_l_down:
                if occ_m_up:
                    if occ_m_down:
                        # Lc:False, Mc:True, Ld:True, Md:True
                        res += 0
                    else:
                        # Lc:False, Mc:True, Ld:True, Md:False
                        res += 0 + (
                            np.expm1(1j * (epsl - epsm - U) * t) / (epsl - epsm - U)
                        )
                else:
                    if occ_m_down:
                        # Lc:False, Mc:False, Ld:True, Md:True
                        res += 0
                    else:
                        # Lc:False, Mc:False, Ld:True, Md:False
                        res += 0 + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
            else:
                if occ_m_up:
                    if occ_m_down:
                        # Lc:False, Mc:True, Ld:False, Md:True
                        res += 0
                    else:
                        # Lc:False, Mc:True, Ld:False, Md:False
                        res += 0
                else:
                    if occ_m_down:
                        # Lc:False, Mc:False, Ld:False, Md:True
                        res += 0
                    else:
                        # Lc:False, Mc:False, Ld:False, Md:False
                        res += 0
    return res


def v_flip(
    flip_up: bool,
    U: float,
    t: float,
    epsl: float,
    occ_l_up: int,
    occ_l_down: int,
    neighbors_eps_occupation_tuples: List[Tuple[float, int, int]],
) -> np.complex128:
    res: np.complex128 = np.complex128(0)
    for (
        epsm,
        occ_m_up,
        occ_m_down,
    ) in neighbors_eps_occupation_tuples:
        if flip_up:
            if occ_l_up:
                if occ_l_down:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:True, Lc:True, Mc:True, Ld:True, Md:True
                            res += 0 - (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:True, Lc:True, Mc:True, Ld:True, Md:False
                            res += (
                                0
                                + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                - (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                - (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                    else:
                        if occ_m_down:
                            # flipUp:True, Lc:True, Mc:False, Ld:True, Md:True
                            res += 0 + (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
                        else:
                            # flipUp:True, Lc:True, Mc:False, Ld:True, Md:False
                            res += (
                                0
                                - (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + 2
                                * (
                                    np.expm1(1j * (epsl - epsm + U) * t)
                                    / (epsl - epsm + U)
                                )
                            )
                else:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:True, Lc:True, Mc:True, Ld:False, Md:True
                            res += (
                                0
                                + (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + -2
                                * (
                                    np.expm1(1j * (epsm - epsl + U) * t)
                                    / (epsm - epsl + U)
                                )
                            )
                        else:
                            # flipUp:True, Lc:True, Mc:True, Ld:False, Md:False
                            res += 0 - (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                    else:
                        if occ_m_down:
                            # flipUp:True, Lc:True, Mc:False, Ld:False, Md:True
                            res += (
                                0
                                - (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                + (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                        else:
                            # flipUp:True, Lc:True, Mc:False, Ld:False, Md:False
                            res += 0 + (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
            else:
                if occ_l_down:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:True, Lc:False, Mc:True, Ld:True, Md:True
                            res += 0 + (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:True, Lc:False, Mc:True, Ld:True, Md:False
                            res += (
                                0
                                - (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                + (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                    else:
                        if occ_m_down:
                            # flipUp:True, Lc:False, Mc:False, Ld:True, Md:True
                            res += 0 - (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
                        else:
                            # flipUp:True, Lc:False, Mc:False, Ld:True, Md:False
                            res += (
                                0
                                + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + -2
                                * (
                                    np.expm1(1j * (epsl - epsm + U) * t)
                                    / (epsl - epsm + U)
                                )
                            )
                else:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:True, Lc:False, Mc:True, Ld:False, Md:True
                            res += (
                                0
                                - (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + 2
                                * (
                                    np.expm1(1j * (epsm - epsl + U) * t)
                                    / (epsm - epsl + U)
                                )
                            )
                        else:
                            # flipUp:True, Lc:False, Mc:True, Ld:False, Md:False
                            res += 0 + (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                    else:
                        if occ_m_down:
                            # flipUp:True, Lc:False, Mc:False, Ld:False, Md:True
                            res += (
                                0
                                + (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                - (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                - (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                        else:
                            # flipUp:True, Lc:False, Mc:False, Ld:False, Md:False
                            res += 0 - (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
        else:
            if occ_l_up:
                if occ_l_down:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:False, Lc:True, Mc:True, Ld:True, Md:True
                            res += 0 - (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:False, Lc:True, Mc:True, Ld:True, Md:False
                            res += 0 + (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
                    else:
                        if occ_m_down:
                            # flipUp:False, Lc:True, Mc:False, Ld:True, Md:True
                            res += (
                                0
                                + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                - (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                - (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                        else:
                            # flipUp:False, Lc:True, Mc:False, Ld:True, Md:False
                            res += (
                                0
                                - (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + 2
                                * (
                                    np.expm1(1j * (epsl - epsm + U) * t)
                                    / (epsl - epsm + U)
                                )
                            )
                else:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:False, Lc:True, Mc:True, Ld:False, Md:True
                            res += 0 + (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:False, Lc:True, Mc:True, Ld:False, Md:False
                            res += 0 - (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
                    else:
                        if occ_m_down:
                            # flipUp:False, Lc:True, Mc:False, Ld:False, Md:True
                            res += (
                                0
                                - (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                + (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                        else:
                            # flipUp:False, Lc:True, Mc:False, Ld:False, Md:False
                            res += (
                                0
                                + (np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm))
                                + -2
                                * (
                                    np.expm1(1j * (epsl - epsm + U) * t)
                                    / (epsl - epsm + U)
                                )
                            )
            else:
                if occ_l_down:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:False, Lc:False, Mc:True, Ld:True, Md:True
                            res += (
                                0
                                + (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + -2
                                * (
                                    np.expm1(1j * (epsm - epsl + U) * t)
                                    / (epsm - epsl + U)
                                )
                            )
                        else:
                            # flipUp:False, Lc:False, Mc:True, Ld:True, Md:False
                            res += (
                                0
                                - (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                + (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                    else:
                        if occ_m_down:
                            # flipUp:False, Lc:False, Mc:False, Ld:True, Md:True
                            res += 0 - (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:False, Lc:False, Mc:False, Ld:True, Md:False
                            res += 0 + (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
                else:
                    if occ_m_up:
                        if occ_m_down:
                            # flipUp:False, Lc:False, Mc:True, Ld:False, Md:True
                            res += (
                                0
                                - (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                + 2
                                * (
                                    np.expm1(1j * (epsm - epsl + U) * t)
                                    / (epsm - epsl + U)
                                )
                            )
                        else:
                            # flipUp:False, Lc:False, Mc:True, Ld:False, Md:False
                            res += (
                                0
                                + (np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl))
                                - (
                                    np.expm1(1j * (epsl - epsm - U) * t)
                                    / (epsl - epsm - U)
                                )
                                - (
                                    np.expm1(1j * (epsm - epsl - U) * t)
                                    / (epsm - epsl - U)
                                )
                            )
                    else:
                        if occ_m_down:
                            # flipUp:False, Lc:False, Mc:False, Ld:False, Md:True
                            res += 0 + (
                                np.expm1(1j * (epsm - epsl) * t) / (epsm - epsl)
                            )
                        else:
                            # flipUp:False, Lc:False, Mc:False, Ld:False, Md:False
                            res += 0 - (
                                np.expm1(1j * (epsl - epsm) * t) / (epsl - epsm)
                            )
    return res


def v_hop(
    hop_sw1_up: bool,
    hop_sw2_up: bool,
    U: float,
    t: float,
    eps_sw1: float,
    occ_sw1_up: int,
    occ_sw1_down: int,
    occ_sw2_up: int,
    occ_sw2_down: int,
    neighbors_eps_occupation_tuples: List[Tuple[float, int, int, bool]],
) -> np.complex128:
    res: np.complex128 = np.complex128(0)
    for eps_nb, occ_nb_up, occ_nb_down, direct_swap in neighbors_eps_occupation_tuples:
        if direct_swap:
            if hop_sw1_up:
                if hop_sw2_up:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                else:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
            else:
                if hop_sw2_up:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                else:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + 2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + -2 * (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb + U) * t
                                                )
                                                / (eps_sw1 - eps_nb + U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(
                                                    1j * (eps_sw1 - eps_nb - U) * t
                                                )
                                                / (eps_sw1 - eps_nb - U)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:True, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
        else:
            if hop_sw1_up:
                if hop_sw2_up:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                else:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:True, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
            else:
                if hop_sw2_up:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:True, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                else:
                    if occ_sw1_up:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb) * t
                                                    )
                                                    / (eps_sw1 - eps_nb)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb + U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb + U)
                                                )
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:True, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
                    else:
                        if occ_sw1_down:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + -2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0 - (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:True, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0 + (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                        else:
                            if occ_sw2_up:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:True, sw2D:False, nbC:False, nbD:False
                                            res += 0
                            else:
                                if occ_sw2_down:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:True
                                            res += (
                                                0
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                + 2
                                                * (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 + U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 + U)
                                                )
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:True, nbD:False
                                            res += (
                                                0
                                                + (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1) * t
                                                    )
                                                    / (eps_nb - eps_sw1)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_sw1 - eps_nb - U) * t
                                                    )
                                                    / (eps_sw1 - eps_nb - U)
                                                )
                                                - (
                                                    np.expm1(
                                                        1j * (eps_nb - eps_sw1 - U) * t
                                                    )
                                                    / (eps_nb - eps_sw1 - U)
                                                )
                                            )
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:True
                                            res += 0 + (
                                                np.expm1(1j * (eps_nb - eps_sw1) * t)
                                                / (eps_nb - eps_sw1)
                                            )
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:True, nbC:False, nbD:False
                                            res += 0 - (
                                                np.expm1(1j * (eps_sw1 - eps_nb) * t)
                                                / (eps_sw1 - eps_nb)
                                            )
                                else:
                                    if occ_nb_up:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:True, nbD:False
                                            res += 0
                                    else:
                                        if occ_nb_down:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:True
                                            res += 0
                                        else:
                                            # DirectSwap:False, HopLUp:False, HopMUp:False, sw1C:False, sw1D:False, sw2C:False, sw2D:False, nbC:False, nbD:False
                                            res += 0
    return res


def v_double_flip(
    flip1_up: bool,
    flip2_up: bool,
    U: float,
    t: float,
    flip1_eps: float,
    flip1_occ_up: int,
    flip1_occ_down: int,
    neighbors_eps_occupation_tuples: List[Tuple[float, int, int, bool]],
) -> np.complex128:
    res: np.complex128 = np.complex128(0)
    for nb_eps, nb_occ_up, nb_occ_down, direct in neighbors_eps_occupation_tuples:
        if direct:
            if flip1_up:
                if flip2_up:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0
                else:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:False
                                    res += 0 + 2 * (
                                        np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                        / (flip1_eps - nb_eps + U)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0 + -2 * (
                                        np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                        / (flip1_eps - nb_eps + U)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
            else:
                if flip2_up:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:False
                                    res += 0 + 2 * (
                                        np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                        / (flip1_eps - nb_eps + U)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0 + -2 * (
                                        np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                        / (flip1_eps - nb_eps + U)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                else:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                        / (flip1_eps - nb_eps - U)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0
                            else:
                                if nb_occ_down:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:True, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0
        else:
            if flip1_up:
                if flip2_up:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                else:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:True, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
            else:
                if flip2_up:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:True, Mc:False, Ld:False, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:True, Ld:False, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:True, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                else:
                    if flip1_occ_up:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:True, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:True, Mc:False, Ld:False, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps) * t)
                                            / (flip1_eps - nb_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (flip1_eps - nb_eps + U) * t)
                                            / (flip1_eps - nb_eps + U)
                                        )
                                    )
                    else:
                        if flip1_occ_down:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:True
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + -2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:True, Md:False
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:True
                                    res += 0 - (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:True, Md:False
                                    res += 0 + (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
                        else:
                            if nb_occ_up:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:True
                                    res += (
                                        0
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        + 2
                                        * (
                                            np.expm1(1j * (nb_eps - flip1_eps + U) * t)
                                            / (nb_eps - flip1_eps + U)
                                        )
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:True, Ld:False, Md:False
                                    res += (
                                        0
                                        + (
                                            np.expm1(1j * (nb_eps - flip1_eps) * t)
                                            / (nb_eps - flip1_eps)
                                        )
                                        - (
                                            np.expm1(1j * (flip1_eps - nb_eps - U) * t)
                                            / (flip1_eps - nb_eps - U)
                                        )
                                        - (
                                            np.expm1(1j * (nb_eps - flip1_eps - U) * t)
                                            / (nb_eps - flip1_eps - U)
                                        )
                                    )
                            else:
                                if nb_occ_down:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:True
                                    res += 0 + (
                                        np.expm1(1j * (nb_eps - flip1_eps) * t)
                                        / (nb_eps - flip1_eps)
                                    )
                                else:
                                    # Direct:False, flip1Up:False, flip2Up:False, Lc:False, Mc:False, Ld:False, Md:False
                                    res += 0 - (
                                        np.expm1(1j * (flip1_eps - nb_eps) * t)
                                        / (flip1_eps - nb_eps)
                                    )
    return res


def v_double_flip_same_site(
    U: float,
    t: float,
    flip_eps: float,
    flip_occ_up: int,
    flip_occ_down: int,
    neighbors_eps_occupation_tuples: List[Tuple[float, int, int]],
) -> np.complex128:
    res: np.complex128 = np.complex128(0)
    for nb_eps, nb_occ_up, nb_occ_down in neighbors_eps_occupation_tuples:
        if flip_occ_up:
            if flip_occ_down:
                if nb_occ_up:
                    if nb_occ_down:
                        # Lc:True, Mc:True, Ld:True, Md:True
                        res += 0 + -2 * (
                            np.expm1(1j * (nb_eps - flip_eps + U) * t)
                            / (nb_eps - flip_eps + U)
                        )
                    else:
                        # Lc:True, Mc:True, Ld:True, Md:False
                        res += (
                            0
                            + (
                                np.expm1(1j * (flip_eps - nb_eps) * t)
                                / (flip_eps - nb_eps)
                            )
                            - (
                                np.expm1(1j * (nb_eps - flip_eps) * t)
                                / (nb_eps - flip_eps)
                            )
                        )
                else:
                    if nb_occ_down:
                        # Lc:True, Mc:False, Ld:True, Md:True
                        res += (
                            0
                            + (
                                np.expm1(1j * (flip_eps - nb_eps) * t)
                                / (flip_eps - nb_eps)
                            )
                            - (
                                np.expm1(1j * (nb_eps - flip_eps) * t)
                                / (nb_eps - flip_eps)
                            )
                        )
                    else:
                        # Lc:True, Mc:False, Ld:True, Md:False
                        res += 0 + 2 * (
                            np.expm1(1j * (flip_eps - nb_eps + U) * t)
                            / (flip_eps - nb_eps + U)
                        )
            else:
                if nb_occ_up:
                    if nb_occ_down:
                        # Lc:True, Mc:True, Ld:False, Md:True
                        res += 0
                    else:
                        # Lc:True, Mc:True, Ld:False, Md:False
                        res += (
                            0
                            - (
                                np.expm1(1j * (flip_eps - nb_eps - U) * t)
                                / (flip_eps - nb_eps - U)
                            )
                            - (
                                np.expm1(1j * (nb_eps - flip_eps - U) * t)
                                / (nb_eps - flip_eps - U)
                            )
                        )
                else:
                    if nb_occ_down:
                        # Lc:True, Mc:False, Ld:False, Md:True
                        res += (
                            0
                            + (
                                np.expm1(1j * (flip_eps - nb_eps - U) * t)
                                / (flip_eps - nb_eps - U)
                            )
                            + (
                                np.expm1(1j * (nb_eps - flip_eps - U) * t)
                                / (nb_eps - flip_eps - U)
                            )
                        )
                    else:
                        # Lc:True, Mc:False, Ld:False, Md:False
                        res += 0
        else:
            if flip_occ_down:
                if nb_occ_up:
                    if nb_occ_down:
                        # Lc:False, Mc:True, Ld:True, Md:True
                        res += 0
                    else:
                        # Lc:False, Mc:True, Ld:True, Md:False
                        res += (
                            0
                            + (
                                np.expm1(1j * (flip_eps - nb_eps - U) * t)
                                / (flip_eps - nb_eps - U)
                            )
                            + (
                                np.expm1(1j * (nb_eps - flip_eps - U) * t)
                                / (nb_eps - flip_eps - U)
                            )
                        )
                else:
                    if nb_occ_down:
                        # Lc:False, Mc:False, Ld:True, Md:True
                        res += (
                            0
                            - (
                                np.expm1(1j * (flip_eps - nb_eps - U) * t)
                                / (flip_eps - nb_eps - U)
                            )
                            - (
                                np.expm1(1j * (nb_eps - flip_eps - U) * t)
                                / (nb_eps - flip_eps - U)
                            )
                        )
                    else:
                        # Lc:False, Mc:False, Ld:True, Md:False
                        res += 0
            else:
                if nb_occ_up:
                    if nb_occ_down:
                        # Lc:False, Mc:True, Ld:False, Md:True
                        res += 0 + 2 * (
                            np.expm1(1j * (nb_eps - flip_eps + U) * t)
                            / (nb_eps - flip_eps + U)
                        )
                    else:
                        # Lc:False, Mc:True, Ld:False, Md:False
                        res += (
                            0
                            - (
                                np.expm1(1j * (flip_eps - nb_eps) * t)
                                / (flip_eps - nb_eps)
                            )
                            + (
                                np.expm1(1j * (nb_eps - flip_eps) * t)
                                / (nb_eps - flip_eps)
                            )
                        )
                else:
                    if nb_occ_down:
                        # Lc:False, Mc:False, Ld:False, Md:True
                        res += (
                            0
                            - (
                                np.expm1(1j * (flip_eps - nb_eps) * t)
                                / (flip_eps - nb_eps)
                            )
                            + (
                                np.expm1(1j * (nb_eps - flip_eps) * t)
                                / (nb_eps - flip_eps)
                            )
                        )
                    else:
                        # Lc:False, Mc:False, Ld:False, Md:False
                        res += 0 + -2 * (
                            np.expm1(1j * (flip_eps - nb_eps + U) * t)
                            / (flip_eps - nb_eps + U)
                        )
    return res
